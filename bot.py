import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.exceptions import BotBlocked
from os import getenv
from sys import exit
import aiogram.utils.markdown as fmt


#bot_token = getenv("BOT_TOKEN")
#if not bot_token:
#exit("Error: no toke provided")
#–û–±–µ–∫—Å –±–æ—Ç–∞
bot = Bot(token='2093079493:AAG3rFaJDCLs7ta_R07fyIIEzhT7dij3U9M',
parse_mode=types.ParseMode.HTML)
#–î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞
dp = Dispatcher(bot)
#–í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)





#–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É / test1
@dp.message_handler(commands="test1")
async def cmd_test1(message: types.Message):
  await message.reply("<b>Test 1</b>", parse_mode=types.ParseMode.HTML)

async def cmd_test2(message: types.Message):
  await message.reply("*Test 2*", parse_mode="MarkdownV2")

dp.register_message_handler(cmd_test2, commands="test2")

@dp.message_handler(commands="answer")
async def cmd_answer(message: types.Message):
  await message.answer("<s>–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç</s>", parse_mode="")


@dp.message_handler(commands="reply")
async def cmd_reply(message: types.Message):
  await message.reply("<u>–≠—Ç–æ –æ—Ç–≤–µ—Ç —Å –æ—Ç–≤–µ—Ç–æ–º</u>")

@dp.message_handler(commands="text")
async def cmd_reply(message: types.Message):
  await message.answer(
     fmt.text(
       fmt.text(fmt.hunderline("–Ø–±–ª–æ–∫–∏"), ",  –≤–µ—Å 1 –∫–≥."),
       fmt.text("–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞:", fmt.hbold(25), "—Ä—É–±–ª–µ–π"),
       sep="\n"
     )
  , parse_mode="HTML")

@dp.message_handler(commands="yo")
async def any_test_message(message: types.Message):
  await message.answer(message.text)
  await message.answer(message.md_text)
  await message.answer(message.html_text)

@dp.message_handler(content_types=[types.ContentType.ANIMATION])
async def echo_document(message: types.Message):
  await message.reply_animation(message.animation.file_id)

@dp.message_handler(content_types=[types.ContentType.DOCUMENT])
async def download_doc(message: types.Message):
  #–°–∫–∞—á–∏–≤–∞–µ–º –≤ –∫–∞—Ç–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–¥–∫–∞—Ç–æ–ª–æ–≥–æ–≤ –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
  await message.document.download()

  @dp.message_handler(content_types=["photo"])
  async def download_photo(message: types.Message):
      await message.photo[-1].download(destination="/tmp/somedir/")
  #–î–æ–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç 
  message.answer(
    f"<u>–í–∞—à —Ç–µ–∫—Å—Ç</u>:]\n\n{message.html_text}", parse_mode="HTML"
  )


@dp.message_handler(commands="test4")
async def with_hidden_link(message: types.Message):
    await message.answer(
      f"{fmt.hide_link('https://telegram.org/blog/video-calls/ru')}–ö—Ç–æ –±—ã –º–æ–≥ –ø–æ–¥—É–º–∞—Ç—å, —á—Ç–æ "
        f"–≤ 2020 –≥–æ–¥—É –≤ Telegram –ø–æ—è–≤—è—Ç—Å—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏!\n\n–û–±—ã—á–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ –≤—ã–∑–æ–≤—ã "
        f"–≤–æ–∑–Ω–∏–∫–ª–∏ –≤ Telegram –ª–∏—à—å –≤ 2017, –∑–∞–º–µ—Ç–Ω–æ –ø–æ–∑–∂–µ —Å–≤–æ–∏—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤. –ê —Å–ø—É—Å—Ç—è —Ç—Ä–∏ –≥–æ–¥–∞, "
        f"–∫–æ–≥–¥–∞ –æ–≥—Ä–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ –ø—Ä–∏—É—á–∏–ª–∏—Å—å —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑ –¥–æ–º–∞ –∏–∑-–∑–∞ —ç–ø–∏–¥–µ–º–∏–∏ "
        f"–∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–∞, –∫–æ–º–∞–Ω–¥–∞ –ü–∞–≤–ª–∞ –î—É—Ä–æ–≤–∞ –Ω–µ —Ä–∞—Å—Ç–µ—Ä—è–ª–∞—Å—å –∏ —Å–¥–µ–ª–∞–ª–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ "
        f"–≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏ –Ω–∞ WebRTC!\n\nP.S. –∞ –µ—â—ë —Ö–æ–¥—è—Ç —Å–ª—É—Ö–∏ –ø—Ä–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —Å–≤–æ–µ–≥–æ —ç–∫—Ä–∞–Ω–∞ :)",
        parse_mode=types.ParseMode.HTML)
    

@dp.message_handler()
async def any_text_message2(message: types.Message):
  await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{fmt.quote_html(message.text)}", parse_mode=types.ParseMode.HTML)

  # –ê –º–æ–∂–Ω–æ –∏ —Ç–∞–∫ 
  await message.answer(fmt.text("–ü—Ä–∏–≤–µ—Ç" , fmt.hbold(message.text)), parse_mode=types.ParseMode.HTML)  


@dp.message_handler(commands="dice")
async def cmd_dice(message: types.Message):
  await message.answer_dice(emoji="üé≤")  
  
@dp.message_handler(commands="dice")
async def cmd_dice(message: types.Message):
  await message.bot.send_dice(-100123456789, emoji="üé≤")  
@dp.errors_handler(exception=BotBlocked)
async def error_bot_blocked(update: types.Update, exception: BotBlocked):
  # Update: –æ–±—Ö–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç Telegram. Exception: –æ–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
   # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∫–∞–∫ —Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–∞–ø—Ä–∏–º–µ—Ä —É–±—Ä–∞—Ç—å —é–∑–µ—Ä–∞ –∏–∑ –±–¥
   print(f'–ú–µ–Ω—è –∑–∞–±–ª–æ–∫–∞–ª —é–∑–µ—Ä! \n–°–æ–æ–±—â–µ–Ω–∏–µ: {update}\n–û—à–∏–±–∫–∞: {exception}')

   #–¢–∞–∫–æ–π —Ö—ç–Ω–¥–ª–µ—Ä –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å  True
   #–µ—Å–ª–∏ –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
   return True
if __name__ == "__main__":
  #–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
  executor.start_polling(dp, skip_updates=True) 